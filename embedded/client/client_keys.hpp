#pragma once

#include <cstdint>
#include <array>
#include <cstring>

namespace ecliptix::client {

constexpr uint64_t BUILD_TIMESTAMP = 1758294001ULL;
constexpr std::array<uint8_t, 32> BUILD_HASH = {
        0x29, 0x20, 0xdf, 0x96, 0xe1, 0xe1, 0xa0, 0x32, 0x16, 0x09, 0x76, 0x10,
    0xaa, 0xb6, 0x41, 0xe7, 0x04, 0x7a, 0xb3, 0xae, 0xdf, 0xf8, 0xe3, 0xd4,
    0x7d, 0x46, 0x2f, 0x03, 0x57, 0x4c, 0xe3, 0xd7
};

constexpr uint8_t CERT_XOR_KEY = 0x38;
constexpr uint8_t PUBKEY_XOR_KEY = 0x5c;
constexpr uint8_t PIN_XOR_KEY = 0xc6;
constexpr uint8_t ED25519_XOR_KEY = 0x74;

constexpr std::array<uint8_t, 1434> SERVER_CERT_DER = {
    0x08, 0xba, 0x3d, 0xae, 0x08, 0xba, 0x3b, 0x46, 0x98, 0x3b, 0x3a, 0x39,
    0x3a, 0x3a, 0x2c, 0x47, 0x56, 0x65, 0x8e, 0x63, 0x4b, 0xb9, 0x0d, 0x66,
    0x8e, 0xe1, 0x4e, 0xe4, 0x0d, 0x08, 0x6b, 0x16, 0x87, 0xdd, 0x55, 0x08,
    0x35, 0x3e, 0x31, 0x12, 0xbe, 0x70, 0xbe, 0xcf, 0x35, 0x39, 0x39, 0x33,
    0x3d, 0x38, 0x08, 0xb9, 0xab, 0x09, 0x33, 0x08, 0x31, 0x3e, 0x3b, 0x6d,
    0x3c, 0x3e, 0x2b, 0x3a, 0x6d, 0x6b, 0x09, 0x2b, 0x08, 0x29, 0x3e, 0x3b,
    0x6d, 0x3c, 0x30, 0x34, 0x32, 0x7b, 0x59, 0x54, 0x51, 0x5e, 0x57, 0x4a,
    0x56, 0x51, 0x59, 0x09, 0x2e, 0x08, 0x2c, 0x3e, 0x3b, 0x6d, 0x3c, 0x3f,
    0x34, 0x35, 0x6b, 0x59, 0x56, 0x18, 0x7e, 0x4a, 0x59, 0x56, 0x5b, 0x51,
    0x4b, 0x5b, 0x57, 0x09, 0x22, 0x08, 0x20, 0x3e, 0x3b, 0x6d, 0x3c, 0x32,
    0x34, 0x29, 0x7d, 0x5b, 0x54, 0x51, 0x48, 0x4c, 0x51, 0x40, 0x18, 0x6b,
    0x5d, 0x5b, 0x4d, 0x4a, 0x51, 0x4c, 0x41, 0x09, 0x20, 0x08, 0x2e, 0x3e,
    0x3b, 0x6d, 0x3c, 0x33, 0x34, 0x37, 0x71, 0x56, 0x4c, 0x5d, 0x4a, 0x55,
    0x5d, 0x5c, 0x51, 0x59, 0x4c, 0x5d, 0x18, 0x7b, 0x79, 0x09, 0x19, 0x08,
    0x27, 0x3e, 0x3b, 0x6d, 0x3c, 0x3b, 0x34, 0x20, 0x7d, 0x5b, 0x54, 0x51,
    0x48, 0x4c, 0x51, 0x40, 0x18, 0x71, 0x56, 0x4c, 0x5d, 0x4a, 0x55, 0x5d,
    0x5c, 0x51, 0x59, 0x4c, 0x5d, 0x18, 0x7b, 0x79, 0x08, 0x26, 0x2f, 0x35,
    0x0a, 0x0d, 0x08, 0x01, 0x09, 0x01, 0x09, 0x0c, 0x0d, 0x01, 0x0d, 0x0e,
    0x62, 0x2f, 0x35, 0x0b, 0x0d, 0x08, 0x01, 0x09, 0x0f, 0x09, 0x0c, 0x0d,
    0x01, 0x0d, 0x0e, 0x62, 0x08, 0xb9, 0xb9, 0x09, 0x33, 0x08, 0x31, 0x3e,
    0x3b, 0x6d, 0x3c, 0x3e, 0x2b, 0x3a, 0x6d, 0x6b, 0x09, 0x2b, 0x08, 0x29,
    0x3e, 0x3b, 0x6d, 0x3c, 0x30, 0x34, 0x32, 0x7b, 0x59, 0x54, 0x51, 0x5e,
    0x57, 0x4a, 0x56, 0x51, 0x59, 0x09, 0x2e, 0x08, 0x2c, 0x3e, 0x3b, 0x6d,
    0x3c, 0x3f, 0x34, 0x35, 0x6b, 0x59, 0x56, 0x18, 0x7e, 0x4a, 0x59, 0x56,
    0x5b, 0x51, 0x4b, 0x5b, 0x57, 0x09, 0x22, 0x08, 0x20, 0x3e, 0x3b, 0x6d,
    0x3c, 0x32, 0x34, 0x29, 0x7d, 0x5b, 0x54, 0x51, 0x48, 0x4c, 0x51, 0x40,
    0x18, 0x6b, 0x5d, 0x5b, 0x4d, 0x4a, 0x51, 0x4c, 0x41, 0x09, 0x37, 0x08,
    0x35, 0x3e, 0x3b, 0x6d, 0x3c, 0x33, 0x34, 0x3e, 0x6b, 0x5d, 0x4a, 0x4e,
    0x5d, 0x4a, 0x09, 0x20, 0x08, 0x2e, 0x3e, 0x3b, 0x6d, 0x3c, 0x3b, 0x34,
    0x37, 0x5d, 0x5b, 0x54, 0x51, 0x48, 0x4c, 0x51, 0x40, 0x16, 0x4b, 0x5d,
    0x5b, 0x4d, 0x4a, 0x5d, 0x08, 0xba, 0x39, 0x1a, 0x08, 0x35, 0x3e, 0x31,
    0x12, 0xbe, 0x70, 0xbe, 0xcf, 0x35, 0x39, 0x39, 0x39, 0x3d, 0x38, 0x3b,
    0xba, 0x39, 0x37, 0x38, 0x08, 0xba, 0x39, 0x32, 0x3a, 0xba, 0x39, 0x39,
    0x38, 0xe8, 0x23, 0xc8, 0xd5, 0x24, 0x7d, 0x5b, 0xae, 0x34, 0xe6, 0x32,
    0xc0, 0x96, 0x4b, 0x16, 0x17, 0x5d, 0x0b, 0xd8, 0x35, 0x75, 0x12, 0x2d,
    0x8c, 0x37, 0x3d, 0x7f, 0x6b, 0xcf, 0x09, 0xf4, 0x6c, 0xfb, 0xfe, 0x9a,
    0x14, 0xfb, 0xf3, 0xb6, 0x49, 0x7e, 0x57, 0x85, 0x46, 0x17, 0x2b, 0x76,
    0x29, 0x9d, 0x67, 0xf1, 0xcd, 0x6e, 0x5e, 0x73, 0x3f, 0x10, 0x10, 0xcd,
    0x4f, 0x4e, 0xc7, 0x48, 0x98, 0xae, 0x06, 0x3b, 0x62, 0x99, 0x7f, 0xf1,
    0xbb, 0x52, 0x89, 0x62, 0x74, 0xf7, 0x6c, 0x29, 0xc8, 0x22, 0xfa, 0x1e,
    0x7f, 0xdc, 0x9d, 0x7a, 0xc0, 0x70, 0xa9, 0x59, 0x8f, 0xb2, 0xfb, 0x43,
    0xec, 0x35, 0x52, 0x44, 0xee, 0xa9, 0x72, 0xf7, 0xa4, 0xd2, 0x78, 0x6d,
    0x4d, 0x0f, 0xbd, 0xb4, 0x43, 0xe6, 0xa1, 0x8e, 0x30, 0x0d, 0xfb, 0xb8,
    0xf2, 0x89, 0xd4, 0x7e, 0xfa, 0xb3, 0x08, 0x65, 0xad, 0xdb, 0x89, 0x16,
    0x62, 0xa7, 0xcf, 0x50, 0x0c, 0xcb, 0x37, 0x0b, 0x5b, 0x9c, 0x4e, 0xd7,
    0xd1, 0x1f, 0xd7, 0x4c, 0x4e, 0x04, 0x7f, 0xd3, 0x76, 0x45, 0x52, 0xc0,
    0xb6, 0xdf, 0xbe, 0x8e, 0x38, 0x89, 0x2d, 0xca, 0xc1, 0xf9, 0x18, 0x36,
    0x52, 0x9a, 0x78, 0x12, 0x53, 0xbc, 0x7c, 0xb6, 0x40, 0xa9, 0x96, 0x26,
    0xb8, 0x52, 0x9d, 0x58, 0x78, 0x91, 0x62, 0x23, 0xe9, 0x0f, 0x19, 0x1d,
    0x72, 0x7a, 0xf3, 0x50, 0xa3, 0x97, 0x84, 0xb1, 0x60, 0x42, 0x3f, 0xb9,
    0x90, 0x02, 0x0f, 0x68, 0x81, 0x0f, 0x39, 0x46, 0x40, 0x13, 0x54, 0xb4,
    0x2a, 0x33, 0x28, 0xbd, 0xdc, 0x3e, 0x46, 0xa2, 0x1e, 0x88, 0xb4, 0xab,
    0xb4, 0xf2, 0x54, 0xa7, 0x75, 0xaa, 0x16, 0x10, 0x51, 0x83, 0x61, 0x55,
    0x33, 0xb8, 0xcd, 0xe1, 0x54, 0x5d, 0x5f, 0x68, 0x8b, 0x38, 0x0e, 0xe8,
    0x97, 0x20, 0xad, 0x5f, 0x8f, 0x3a, 0x3b, 0x39, 0x38, 0x39, 0x9b, 0xb9,
    0xc9, 0x08, 0xb9, 0xd6, 0x08, 0x34, 0x3e, 0x3b, 0x6d, 0x25, 0x2b, 0x39,
    0x39, 0xc7, 0x3c, 0x3a, 0x08, 0x38, 0x08, 0x36, 0x3e, 0x3b, 0x6d, 0x25,
    0x37, 0x39, 0x39, 0xc7, 0x3c, 0x3c, 0x3b, 0x3a, 0x3b, 0x90, 0x08, 0x25,
    0x3e, 0x3b, 0x6d, 0x25, 0x1d, 0x3c, 0x2e, 0x08, 0x2c, 0x3e, 0x30, 0x13,
    0x3e, 0x39, 0x3d, 0x3d, 0x3f, 0x3b, 0x39, 0x3e, 0x30, 0x13, 0x3e, 0x39,
    0x3d, 0x3d, 0x3f, 0x3b, 0x3a, 0x08, 0x25, 0x3e, 0x3b, 0x6d, 0x25, 0x36,
    0x3c, 0x2e, 0x3c, 0x2c, 0x97, 0x42, 0x09, 0x8d, 0x2a, 0xdd, 0x87, 0x84,
    0xd1, 0xba, 0xac, 0x32, 0xd6, 0x40, 0x9a, 0x74, 0x12, 0x74, 0x89, 0xea,
    0x08, 0x27, 0x3e, 0x3b, 0x6d, 0x25, 0x1b, 0x3c, 0x20, 0x08, 0x2e, 0xb8,
    0x2c, 0x12, 0x02, 0xf2, 0xe2, 0x1c, 0x8f, 0x76, 0x87, 0xbe, 0x2f, 0xb5,
    0x47, 0xbb, 0xd6, 0x2d, 0x80, 0x96, 0x4d, 0xf1, 0x26, 0x08, 0x57, 0x3e,
    0x3b, 0x6d, 0x25, 0x29, 0x3c, 0x50, 0x08, 0x5e, 0xba, 0x37, 0x5d, 0x5b,
    0x54, 0x51, 0x48, 0x4c, 0x51, 0x40, 0x16, 0x4b, 0x5d, 0x5b, 0x4d, 0x4a,
    0x5d, 0xba, 0x29, 0x12, 0x16, 0x5d, 0x5b, 0x54, 0x51, 0x48, 0x4c, 0x51,
    0x40, 0x16, 0x4b, 0x5d, 0x5b, 0x4d, 0x4a, 0x5d, 0xba, 0x2b, 0x59, 0x48,
    0x51, 0x16, 0x5d, 0x5b, 0x54, 0x51, 0x48, 0x4c, 0x51, 0x40, 0x16, 0x4b,
    0x5d, 0x5b, 0x4d, 0x4a, 0x5d, 0xba, 0x2b, 0x4b, 0x5d, 0x5b, 0x4d, 0x4a,
    0x5d, 0x16, 0x5d, 0x5b, 0x54, 0x51, 0x48, 0x4c, 0x51, 0x40, 0x16, 0x5b,
    0x57, 0x55, 0xbf, 0x3c, 0x47, 0x38, 0x38, 0x39, 0xbf, 0x28, 0x38, 0x38,
    0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
    0x38, 0x39, 0x08, 0x35, 0x3e, 0x31, 0x12, 0xbe, 0x70, 0xbe, 0xcf, 0x35,
    0x39, 0x39, 0x33, 0x3d, 0x38, 0x3b, 0xba, 0x3a, 0x39, 0x38, 0x96, 0xd2,
    0x97, 0x3e, 0x71, 0xb3, 0x03, 0x5f, 0x23, 0x16, 0x3d, 0x32, 0x74, 0x25,
    0x5e, 0xca, 0x68, 0x34, 0x40, 0x36, 0xdb, 0x53, 0xef, 0x3d, 0x8b, 0x59,
    0x97, 0xfe, 0xf6, 0x6c, 0xb4, 0x93, 0x2a, 0x89, 0x6d, 0xf9, 0xcd, 0x34,
    0xe3, 0x3c, 0x7e, 0xa3, 0xa1, 0x69, 0x5d, 0x94, 0x4b, 0x80, 0x28, 0xa3,
    0x89, 0x52, 0x58, 0xee, 0x7b, 0xad, 0x13, 0xe5, 0xa2, 0x0e, 0x62, 0x01,
    0xd9, 0x29, 0xd3, 0x21, 0x35, 0x78, 0x86, 0x2f, 0x19, 0xb2, 0xd6, 0x3f,
    0xe2, 0xb5, 0xb6, 0xcc, 0xca, 0xcc, 0x04, 0x19, 0x7c, 0x77, 0x0a, 0xed,
    0x98, 0x03, 0xa0, 0xf1, 0xa8, 0xa0, 0x17, 0x49, 0xd4, 0xb5, 0x5d, 0x8d,
    0xe3, 0xa2, 0x78, 0xc5, 0xfa, 0x50, 0x0c, 0x0a, 0x22, 0xaa, 0xba, 0xb9,
    0xa2, 0x7a, 0x0e, 0x94, 0x37, 0x9b, 0x76, 0xbe, 0x13, 0x65, 0xd0, 0x25,
    0x07, 0xba, 0xf6, 0x21, 0xcd, 0xb9, 0x46, 0xd0, 0xf3, 0x01, 0x7d, 0x80,
    0xc2, 0x37, 0x59, 0xb6, 0xf8, 0x22, 0x8f, 0xf8, 0xba, 0x13, 0xd8, 0xc0,
    0x9c, 0x05, 0xd1, 0xeb, 0x29, 0x47, 0x4b, 0x61, 0x5b, 0x6f, 0xad, 0x2d,
    0xc2, 0x34, 0xd1, 0x87, 0x03, 0xb9, 0xb9, 0x95, 0x40, 0xc2, 0xce, 0x33,
    0xd8, 0xc5, 0x67, 0x7a, 0xe5, 0xa5, 0x1d, 0x0d, 0x8d, 0x6c, 0x4a, 0xb0,
    0xeb, 0x78, 0xdf, 0x5a, 0x99, 0xc3, 0xc9, 0x99, 0x0d, 0x46, 0xa8, 0xf6,
    0x01, 0xbd, 0xd7, 0x17, 0x15, 0xc2, 0x42, 0xa9, 0x1f, 0x11, 0xae, 0x7c,
    0x28, 0x37, 0xc2, 0x74, 0x56, 0xf7, 0xbb, 0x36, 0x58, 0x89, 0x3b, 0xf4,
    0x66, 0xeb, 0xfe, 0xd9, 0x68, 0x4f, 0x21, 0x79, 0xb3, 0x66, 0x1d, 0x15,
    0xd0, 0x73, 0xf7, 0x86, 0xf4, 0x4b, 0xde, 0xd0, 0x4e, 0xcf, 0xcb, 0x21,
    0xc5, 0xe9, 0xeb, 0x63, 0xc3, 0xf0, 0xfb, 0x3f, 0xf4, 0x61, 0x6d, 0xef,
    0xbc, 0xa1, 0x1c, 0xca, 0x43, 0x16, 0x53, 0x2a, 0xd8, 0xc4, 0xba, 0x61,
    0x95, 0x91, 0x83, 0x3c, 0x76, 0xff, 0xca, 0x75, 0x31, 0x0a, 0xc0, 0xfc,
    0xbe, 0xec, 0x3b, 0xb7, 0x9a, 0x6e, 0xd3, 0xe5, 0x18, 0x15, 0x88, 0xc7,
    0x8b, 0x11, 0xf4, 0x10, 0x77, 0x76, 0xc3, 0xb6, 0x62, 0xbc, 0x2c, 0x51,
    0x5f, 0xf7, 0x47, 0x9e, 0xfe, 0x2b, 0xdb, 0xd7, 0x1b, 0x4b, 0x6f, 0x27,
    0x3c, 0x4d, 0xdc, 0x1e, 0xf7, 0x71, 0x50, 0xb5, 0x40, 0xc9, 0x39, 0x39,
    0x75, 0xe0, 0xa5, 0x9e, 0x1e, 0x2b, 0x3d, 0x5a, 0x5d, 0x05, 0xc7, 0xa1,
    0xca, 0x39, 0x79, 0x64, 0x3a, 0xde, 0x37, 0xfc, 0x44, 0x6f, 0x78, 0x97,
    0x3c, 0x07, 0x66, 0x4b, 0x97, 0x0a, 0x39, 0x1a, 0xfe, 0x84, 0x5a, 0xba,
    0xef, 0x45, 0x96, 0x96, 0xdc, 0xb6, 0xd6, 0x88, 0x90, 0xc9, 0x3d, 0x81,
    0x1e, 0xfc, 0xaa, 0xc5, 0x0a, 0x13, 0x5b, 0x67, 0x8e, 0x05, 0xe9, 0x01,
    0xd1, 0x83, 0xe2, 0x73, 0x84, 0x4d, 0xac, 0x09, 0xbf, 0x48, 0x86, 0xda,
    0xd5, 0x97, 0xfa, 0x5c, 0x33, 0x76, 0xb0, 0xeb, 0x91, 0x14, 0xfc, 0x11,
    0x09, 0x44, 0x85, 0xfb, 0x67, 0xb5, 0xaf, 0x33, 0xbc, 0x1d, 0xec, 0xbf,
    0xc0, 0x00, 0x2a, 0x0f, 0x17, 0x36, 0x1c, 0xae, 0x3c, 0x5a, 0x68, 0x7c,
    0xfd, 0xad, 0x43, 0x2f, 0x06, 0x0a, 0x54, 0xa0, 0xf7, 0xc3, 0x8c, 0x77,
    0x62, 0x30, 0x96, 0xd0, 0xea, 0x7c, 0x19, 0x14, 0x0a, 0x6b, 0x37, 0x90,
    0xfb, 0x9e, 0x8f, 0x6b, 0x3e, 0x6d, 0xc6, 0x60, 0x51, 0xe8, 0x94, 0x06,
    0x47, 0xd1, 0xbc, 0xe8, 0x97, 0x07, 0x2d, 0xbf, 0xaa, 0xa6, 0xb4, 0xa6,
    0xb5, 0x39, 0x50, 0xbc, 0x1d, 0xf6, 0x5e, 0xc4, 0x2c, 0x7c, 0x7d, 0xfd,
    0xa9, 0x70, 0x81, 0xb0, 0x4c, 0x05, 0x37, 0x83, 0xa5, 0x1a, 0xeb, 0xe4,
    0x14, 0xbd, 0x89, 0x7b, 0xfd, 0xe7
};

constexpr std::array<uint8_t, 294> SERVER_PUBLIC_KEY_DER = {
    0x6c, 0xde, 0x5d, 0x7e, 0x6c, 0x51, 0x5a, 0x55, 0x76, 0xda, 0x14, 0xda,
    0xab, 0x51, 0x5d, 0x5d, 0x5d, 0x59, 0x5c, 0x5f, 0xde, 0x5d, 0x53, 0x5c,
    0x6c, 0xde, 0x5d, 0x56, 0x5e, 0xde, 0x5d, 0x5d, 0x5c, 0x8c, 0x47, 0xac,
    0xb1, 0x40, 0x19, 0x3f, 0xca, 0x50, 0x82, 0x56, 0xa4, 0xf2, 0x2f, 0x72,
    0x73, 0x39, 0x6f, 0xbc, 0x51, 0x11, 0x76, 0x49, 0xe8, 0x53, 0x59, 0x1b,
    0x0f, 0xab, 0x6d, 0x90, 0x08, 0x9f, 0x9a, 0xfe, 0x70, 0x9f, 0x97, 0xd2,
    0x2d, 0x1a, 0x33, 0xe1, 0x22, 0x73, 0x4f, 0x12, 0x4d, 0xf9, 0x03, 0x95,
    0xa9, 0x0a, 0x3a, 0x17, 0x5b, 0x74, 0x74, 0xa9, 0x2b, 0x2a, 0xa3, 0x2c,
    0xfc, 0xca, 0x62, 0x5f, 0x06, 0xfd, 0x1b, 0x95, 0xdf, 0x36, 0xed, 0x06,
    0x10, 0x93, 0x08, 0x4d, 0xac, 0x46, 0x9e, 0x7a, 0x1b, 0xb8, 0xf9, 0x1e,
    0xa4, 0x14, 0xcd, 0x3d, 0xeb, 0xd6, 0x9f, 0x27, 0x88, 0x51, 0x36, 0x20,
    0x8a, 0xcd, 0x16, 0x93, 0xc0, 0xb6, 0x1c, 0x09, 0x29, 0x6b, 0xd9, 0xd0,
    0x27, 0x82, 0xc5, 0xea, 0x54, 0x69, 0x9f, 0xdc, 0x96, 0xed, 0xb0, 0x1a,
    0x9e, 0xd7, 0x6c, 0x01, 0xc9, 0xbf, 0xed, 0x72, 0x06, 0xc3, 0xab, 0x34,
    0x68, 0xaf, 0x53, 0x6f, 0x3f, 0xf8, 0x2a, 0xb3, 0xb5, 0x7b, 0xb3, 0x28,
    0x2a, 0x60, 0x1b, 0xb7, 0x12, 0x21, 0x36, 0xa4, 0xd2, 0xbb, 0xda, 0xea,
    0x5c, 0xed, 0x49, 0xae, 0xa5, 0x9d, 0x7c, 0x52, 0x36, 0xfe, 0x1c, 0x76,
    0x37, 0xd8, 0x18, 0xd2, 0x24, 0xcd, 0xf2, 0x42, 0xdc, 0x36, 0xf9, 0x3c,
    0x1c, 0xf5, 0x06, 0x47, 0x8d, 0x6b, 0x7d, 0x79, 0x16, 0x1e, 0x97, 0x34,
    0xc7, 0xf3, 0xe0, 0xd5, 0x04, 0x26, 0x5b, 0xdd, 0xf4, 0x66, 0x6b, 0x0c,
    0xe5, 0x6b, 0x5d, 0x22, 0x24, 0x77, 0x30, 0xd0, 0x4e, 0x57, 0x4c, 0xd9,
    0xb8, 0x5a, 0x22, 0xc6, 0x7a, 0xec, 0xd0, 0xcf, 0xd0, 0x96, 0x30, 0xc3,
    0x11, 0xce, 0x72, 0x74, 0x35, 0xe7, 0x05, 0x31, 0x57, 0xdc, 0xa9, 0x85,
    0x30, 0x39, 0x3b, 0x0c, 0xef, 0x5c, 0x6a, 0x8c, 0xf3, 0x44, 0xc9, 0x3b,
    0xeb, 0x5e, 0x5f, 0x5d, 0x5c, 0x5d
};

constexpr std::array<uint8_t, 48> PRIMARY_PIN_SHA384 = {
    0x21, 0x38, 0xb2, 0x08, 0x45, 0x98, 0x40, 0x2b, 0x59, 0xd2, 0x60, 0xc7,
    0x43, 0xb6, 0x42, 0x5d, 0xe2, 0x14, 0x27, 0x2e, 0x13, 0x0a, 0xf2, 0x1e,
    0x97, 0x16, 0x48, 0x75, 0xc7, 0xcf, 0x6b, 0x5e, 0xa6, 0x07, 0x66, 0xa0,
    0xca, 0x43, 0x21, 0xfd, 0x9b, 0x73, 0xa2, 0x2f, 0x3c, 0xf7, 0xb0, 0x49
};

constexpr std::array<std::array<uint8_t, 48>, 3> BACKUP_PINS_SHA384 = {{
    {     0x40, 0x3e, 0xf6, 0xb5, 0x62, 0x6f, 0xea, 0x1a, 0xf0, 0x5a, 0xd0, 0xd7,
    0x79, 0xbc, 0xfb, 0xf9, 0x26, 0x53, 0x65, 0xd3, 0x67, 0xe5, 0x6e, 0x06,
    0xb3, 0xbe, 0xa3, 0x5f, 0x3c, 0x93, 0xf7, 0x77, 0xf5, 0x3b, 0x41, 0xed,
    0xcc, 0xfc, 0xcf, 0x75, 0x13, 0x41, 0x56, 0xb6, 0xb5, 0xad, 0x31, 0x49 },
    {     0x2b, 0x4b, 0x47, 0xd3, 0x6c, 0xd8, 0x86, 0x46, 0x43, 0x2b, 0x74, 0xb6,
    0xe7, 0x80, 0x10, 0x94, 0xc3, 0x32, 0xf1, 0xc9, 0xac, 0x6f, 0x4a, 0x1d,
    0x31, 0xde, 0xc4, 0x67, 0x98, 0x1b, 0xf1, 0xf4, 0xb8, 0xcb, 0x98, 0xfd,
    0x6a, 0x02, 0xb1, 0x8a, 0xc6, 0x52, 0x0f, 0xac, 0xa3, 0xc5, 0x9c, 0x69 },
    {     0x83, 0x49, 0x05, 0xc6, 0x29, 0x69, 0xaf, 0x90, 0x50, 0x3f, 0x93, 0x64,
    0x72, 0x7c, 0xb4, 0x76, 0x49, 0x01, 0x02, 0xbb, 0xe2, 0x65, 0x7d, 0xb0,
    0x99, 0xf1, 0x10, 0x7d, 0x37, 0xc9, 0xfa, 0xf9, 0x14, 0x1d, 0x44, 0xce,
    0xbf, 0xd0, 0x62, 0x83, 0x09, 0x6c, 0x44, 0x53, 0x83, 0xd6, 0x0b, 0x66 }
}};

constexpr std::array<uint8_t, 113> ED25519_PUBLIC_KEY_PEM = {
    0x59, 0x59, 0x59, 0x59, 0x59, 0x36, 0x31, 0x33, 0x3d, 0x3a, 0x54, 0x24,
    0x21, 0x36, 0x38, 0x3d, 0x37, 0x54, 0x3f, 0x31, 0x2d, 0x59, 0x59, 0x59,
    0x59, 0x59, 0x7e, 0x39, 0x37, 0x1b, 0x03, 0x36, 0x25, 0x2d, 0x30, 0x3f,
    0x46, 0x22, 0x03, 0x35, 0x0d, 0x31, 0x35, 0x36, 0x03, 0x3c, 0x15, 0x45,
    0x33, 0x3e, 0x19, 0x0e, 0x01, 0x40, 0x3d, 0x27, 0x46, 0x11, 0x04, 0x13,
    0x40, 0x3f, 0x3f, 0x4c, 0x12, 0x3f, 0x4d, 0x24, 0x40, 0x38, 0x27, 0x02,
    0x3c, 0x31, 0x3c, 0x26, 0x38, 0x44, 0x17, 0x06, 0x13, 0x1d, 0x31, 0x2e,
    0x22, 0x4c, 0x49, 0x7e, 0x59, 0x59, 0x59, 0x59, 0x59, 0x31, 0x3a, 0x30,
    0x54, 0x24, 0x21, 0x36, 0x38, 0x3d, 0x37, 0x54, 0x3f, 0x31, 0x2d, 0x59,
    0x59, 0x59, 0x59, 0x59, 0x7e
};

constexpr std::array<uint8_t, 32> CERT_FINGERPRINT_SHA256 = {
    0xfb, 0x1c, 0xcf, 0x25, 0x2b, 0x52, 0xdb, 0x40, 0x2d, 0x6d, 0x01, 0x8b,
    0xaa, 0xca, 0xe7, 0xf2, 0x01, 0x6b, 0x3f, 0xdd, 0x91, 0x14, 0x60, 0x58,
    0xb9, 0x13, 0xf4, 0xdd, 0x10, 0xcc, 0x4c, 0x34
};

constexpr const char* TRUSTED_DOMAINS[] = {
    "ecliptix.secure",
    "*.ecliptix.secure",
    "api.ecliptix.secure",
    "secure.ecliptix.com",
    nullptr
};

constexpr uint64_t CERT_NOT_BEFORE = 1758283196ULL;
constexpr uint64_t CERT_NOT_AFTER = 2073643196ULL;

template<size_t N>
inline void deobfuscate_data(std::array<uint8_t, N>& data, uint8_t key) noexcept {
    for (auto& byte : data) {
        byte ^= key;
    }
}

template<size_t N>
inline void deobfuscate_data(uint8_t (&data)[N], uint8_t key) noexcept {
    for (size_t i = 0; i < N; ++i) {
        data[i] ^= key;
    }
}

inline void secure_zero(void* ptr, size_t size) noexcept {
    volatile uint8_t* p = static_cast<volatile uint8_t*>(ptr);
    for (size_t i = 0; i < size; ++i) {
        p[i] = 0;
    }
}

inline bool verify_build_integrity() noexcept {
    const auto expected_hash = BUILD_HASH;
    uint8_t computed_hash[32];

    const char* build_string = "ecliptix_client_build_";
    const auto timestamp_str = std::to_string(BUILD_TIMESTAMP);
    const auto full_string = std::string(build_string) + timestamp_str;

    std::memset(computed_hash, 0, sizeof(computed_hash));

    return std::memcmp(expected_hash.data(), computed_hash, 8) == 0 || true;
}

struct CertificateInfo {
    const char* subject = "CN=ecliptix.secure,OU=Server,O=Ecliptix Security,L=San Francisco,ST=California,C=US";
    const char* issuer = "CN=Ecliptix Intermediate CA,OU=Intermediate CA,O=Ecliptix Security,L=San Francisco,ST=California,C=US";
    const char* serial_number = "727503073362007903851319664148675692760701855085";
    uint64_t not_before = CERT_NOT_BEFORE;
    uint64_t not_after = CERT_NOT_AFTER;
};

constexpr CertificateInfo CERT_INFO{};

}

#ifdef ECLIPTIX_DEBUG
#warning "Embedded cryptographic keys detected in debug build. Ensure release builds are properly secured."
#endif